{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/src/components/GitConnectionForm.js\";\nimport React from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport * as userService from \"../services/userService\";\nimport auth from \"../services/authService\";\n\nvar GitConnectionForm =\n/*#__PURE__*/\nfunction (_Form) {\n  _inherits(GitConnectionForm, _Form);\n\n  function GitConnectionForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GitConnectionForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GitConnectionForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: {\n        username: \"\",\n        password: \"\"\n      },\n      errors: {}\n    };\n    _this.schema = {\n      username: Joi.string().required().label(\"Username\").email({\n        minDomainAtoms: 2\n      }),\n      password: Joi.string().required().label(\"Password\").min(5),\n      name: Joi.string().alphanum().min(3).max(30).required().label(\"Name\")\n    };\n    _this.doSubmit =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, errors;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return userService.register(_this.state.data);\n\n            case 3:\n              response = _context.sent;\n              auth.loginWithJwt(response.headers[\"x-auth-token\"]);\n              window.location = \"/\"; //this.props.history.push(\"/\");\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (_context.t0.response && _context.t0.response.status === 400) {\n                errors = _objectSpread({}, _this.state.errors);\n                errors.username = _context.t0.response.data;\n\n                _this.setState({\n                  errors: errors\n                });\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n    return _this;\n  }\n\n  _createClass(GitConnectionForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, this.renderInput(\"username\", \"Email Address\"), this.renderInput(\"password\", \"Password\", \"password\"), this.renderInput(\"name\", \"User Name\"), this.renderButton(\"Connect to Git\")));\n    }\n  }]);\n\n  return GitConnectionForm;\n}(Form);\n\nexport default GitConnectionForm;","map":{"version":3,"sources":["/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/src/components/GitConnectionForm.js"],"names":["React","Form","Joi","userService","auth","GitConnectionForm","state","data","username","password","errors","schema","string","required","label","email","minDomainAtoms","min","name","alphanum","max","doSubmit","register","response","loginWithJwt","headers","window","location","status","setState","handleSubmit","renderInput","renderButton"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,WAAZ,MAA6B,yBAA7B;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;IAEMC,iB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE,EADN;AAEJC,QAAAA,QAAQ,EAAE;AAFN,OADA;AAKNC,MAAAA,MAAM,EAAE;AALF,K;UAQRC,M,GAAS;AACPH,MAAAA,QAAQ,EAAEN,GAAG,CAACU,MAAJ,GACPC,QADO,GAEPC,KAFO,CAED,UAFC,EAGPC,KAHO,CAGD;AAAEC,QAAAA,cAAc,EAAE;AAAlB,OAHC,CADH;AAKPP,MAAAA,QAAQ,EAAEP,GAAG,CAACU,MAAJ,GACPC,QADO,GAEPC,KAFO,CAED,UAFC,EAGPG,GAHO,CAGH,CAHG,CALH;AASPC,MAAAA,IAAI,EAAEhB,GAAG,CAACU,MAAJ,GACHO,QADG,GAEHF,GAFG,CAEC,CAFD,EAGHG,GAHG,CAGC,EAHD,EAIHP,QAJG,GAKHC,KALG,CAKG,MALH;AATC,K;UAiBTO,Q;;;;6BAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEgBlB,WAAW,CAACmB,QAAZ,CAAqB,MAAKhB,KAAL,CAAWC,IAAhC,CAFhB;;AAAA;AAEDgB,cAAAA,QAFC;AAGPnB,cAAAA,IAAI,CAACoB,YAAL,CAAkBD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,CAAlB;AACAC,cAAAA,MAAM,CAACC,QAAP,GAAkB,GAAlB,CAJO,CAKP;;AALO;AAAA;;AAAA;AAAA;AAAA;;AAOP,kBAAI,YAAGJ,QAAH,IAAe,YAAGA,QAAH,CAAYK,MAAZ,KAAuB,GAA1C,EAA+C;AACvClB,gBAAAA,MADuC,qBACzB,MAAKJ,KAAL,CAAWI,MADc;AAE7CA,gBAAAA,MAAM,CAACF,QAAP,GAAkB,YAAGe,QAAH,CAAYhB,IAA9B;;AACA,sBAAKsB,QAAL,CAAc;AAAEnB,kBAAAA,MAAM,EAANA;AAAF,iBAAd;AACD;;AAXM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;6BAeF;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,QAAQ,EAAE,KAAKoB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,WAAL,CAAiB,UAAjB,EAA6B,eAA7B,CADH,EAEG,KAAKA,WAAL,CAAiB,UAAjB,EAA6B,UAA7B,EAAyC,UAAzC,CAFH,EAGG,KAAKA,WAAL,CAAiB,MAAjB,EAAyB,WAAzB,CAHH,EAIG,KAAKC,YAAL,CAAkB,gBAAlB,CAJH,CADF,CADF;AAUD;;;;EApD6B/B,I;;AAuDhC,eAAeI,iBAAf","sourcesContent":["import React from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport * as userService from \"../services/userService\";\nimport auth from \"../services/authService\";\n\nclass GitConnectionForm extends Form {\n  state = {\n    data: {\n      username: \"\",\n      password: \"\"\n    },\n    errors: {}\n  };\n\n  schema = {\n    username: Joi.string()\n      .required()\n      .label(\"Username\")\n      .email({ minDomainAtoms: 2 }),\n    password: Joi.string()\n      .required()\n      .label(\"Password\")\n      .min(5),\n    name: Joi.string()\n      .alphanum()\n      .min(3)\n      .max(30)\n      .required()\n      .label(\"Name\")\n  };\n\n  doSubmit = async () => {\n    try {\n      const response = await userService.register(this.state.data);\n      auth.loginWithJwt(response.headers[\"x-auth-token\"]);\n      window.location = \"/\";\n      //this.props.history.push(\"/\");\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        const errors = { ...this.state.errors };\n        errors.username = ex.response.data;\n        this.setState({ errors });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          {this.renderInput(\"username\", \"Email Address\")}\n          {this.renderInput(\"password\", \"Password\", \"password\")}\n          {this.renderInput(\"name\", \"User Name\")}\n          {this.renderButton(\"Connect to Git\")}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default GitConnectionForm;\n"]},"metadata":{},"sourceType":"module"}