{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\nvar apiEndpoint = \"/github/gitPanelAuth\";\nvar tokenKey = \"token\";\n\nvar request = require(\"request\");\n\nhttp.setJwt(getJwt());\nexport function login(_x, _x2) {\n  return _login.apply(this, arguments);\n}\n\nfunction _login() {\n  _login = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(username, password) {\n    var _ref, jwt;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return http.post(apiEndpoint, {\n              username: username,\n              password: password\n            });\n\n          case 2:\n            _ref = _context.sent;\n            jwt = _ref.data;\n            localStorage.setItem(tokenKey, jwt);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _login.apply(this, arguments);\n}\n\nexport function connect() {\n  return _connect.apply(this, arguments);\n}\n\nfunction _connect() {\n  _connect = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var config, jwt;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            config = {\n              client_id: \"1acd98284d275423d24b\",\n              client_secret: \"208b91032bc735c02b2ee9815d300ff705ef9431\",\n              redirect_url: \"http://localhost:3000/profile\",\n              authorize_url: \"https://github.com/login/oauth/authorize\",\n              token_url: \"https://github.com/login/oauth/access_token\",\n              user_url: \"https://api.github.com/user\",\n              scope: \"user\"\n            };\n            jwt = http.get(\"https://github.com/login/oauth/authorize?scope=user:TestUser001info&client_id=1acd98284d275423d24b\", function (req, res) {\n              // extract authorize code\n              console.log(\"callback!!\");\n              var code = req.query.code; // configure request params\n\n              var options = {\n                method: \"POST\",\n                uri: config.token_url,\n                formData: {\n                  client_id: config.client_id,\n                  client_secret: config.client_secret,\n                  code: code\n                },\n                headers: {\n                  accept: \"application/json\"\n                }\n              }; // make a request for auth_token using above options\n\n              request(options, function (e, r, b) {\n                // process the body\n                if (b) {\n                  var jb = JSON.parse(b);\n                  return jb.access_token;\n                }\n              });\n            });\n            console.log(\"jwt:::\" + jwt);\n            console.log(jwt);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _connect.apply(this, arguments);\n}\n\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\nexport function getCurrentUser() {\n  try {\n    var jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\nexport default {\n  login: login,\n  connect: connect,\n  loginWithJwt: loginWithJwt,\n  logout: logout,\n  getCurrentUser: getCurrentUser,\n  getJwt: getJwt\n};","map":{"version":3,"sources":["/Users/hakantemiz/Documents/GitHub/GitPanel/gitpanel/client/src/services/githubAuthService.js"],"names":["http","jwtDecode","apiEndpoint","tokenKey","request","require","setJwt","getJwt","login","username","password","post","jwt","data","localStorage","setItem","connect","config","client_id","client_secret","redirect_url","authorize_url","token_url","user_url","scope","get","req","res","console","log","code","query","options","method","uri","formData","headers","accept","e","r","b","jb","JSON","parse","access_token","loginWithJwt","logout","removeItem","getCurrentUser","getItem","ex"],"mappings":"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","sourcesContent":["import http from \"./httpService\";\nimport jwtDecode from \"jwt-decode\";\n\nconst apiEndpoint = \"/github/gitPanelAuth\";\nconst tokenKey = \"token\";\nconst request = require(\"request\");\n\nhttp.setJwt(getJwt());\n\nexport async function login(username, password) {\n  const { data: jwt } = await http.post(apiEndpoint, { username, password });\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport async function connect() {\n  var config = {\n    client_id: \"1acd98284d275423d24b\",\n    client_secret: \"208b91032bc735c02b2ee9815d300ff705ef9431\",\n    redirect_url: \"http://localhost:3000/profile\",\n    authorize_url: \"https://github.com/login/oauth/authorize\",\n    token_url: \"https://github.com/login/oauth/access_token\",\n    user_url: \"https://api.github.com/user\",\n    scope: \"user\"\n  };\n\n  var jwt = http.get(\n    \"https://github.com/login/oauth/authorize?scope=user:TestUser001info&client_id=1acd98284d275423d24b\",\n    function(req, res) {\n      // extract authorize code\n      console.log(\"callback!!\");\n      var code = req.query.code;\n\n      // configure request params\n      let options = {\n        method: \"POST\",\n        uri: config.token_url,\n        formData: {\n          client_id: config.client_id,\n          client_secret: config.client_secret,\n          code: code\n        },\n        headers: {\n          accept: \"application/json\"\n        }\n      };\n\n      // make a request for auth_token using above options\n      request(options, function(e, r, b) {\n        // process the body\n        if (b) {\n          let jb = JSON.parse(b);\n          return jb.access_token;\n        }\n      });\n    }\n  );\n\n  console.log(\"jwt:::\" + jwt);\n  console.log(jwt);\n}\n\nexport function loginWithJwt(jwt) {\n  localStorage.setItem(tokenKey, jwt);\n}\n\nexport function logout() {\n  localStorage.removeItem(tokenKey);\n}\n\nexport function getCurrentUser() {\n  try {\n    const jwt = localStorage.getItem(tokenKey);\n    return jwtDecode(jwt);\n  } catch (ex) {\n    return null;\n  }\n}\n\nexport function getJwt() {\n  return localStorage.getItem(tokenKey);\n}\n\nexport default {\n  login,\n  connect,\n  loginWithJwt,\n  logout,\n  getCurrentUser,\n  getJwt\n};\n"]},"metadata":{},"sourceType":"module"}